import java.io.File;
import java.io.IOException;
import java.util.Scanner;

class Main {	

    public static void main(String[] args) throws IOException {

        Scanner inputCube = new Scanner(new File("Lab8Data.txt"));

        while (true) {
            int d, c;
            int sumRow, sumColumn, sumDiag = 0, sumRevDiag = 0, sum = 0;
            boolean checkRow = true;
            boolean checkColumn = true;
            boolean checkDiag = true;
            boolean checkDiag2 = true;
            boolean magicSquare = true;
            int[][] square = new int[4][4];

            //Creates the array.
            for (d = 0; d < 4; d++) {
                for (c = 0; c < 4; c++) {
                    square[d][c] = inputCube.nextInt();
                }
            }

            // Displays the array.
            for (d = 0; d <= 3; d++) {
                for (c = 0; c <= 3; c++) {
                    if (square[0][0] == -999) {
                        break;
                    }
                    System.out.print(square[d][c] + " ");
                }
                System.out.println();
            }


            //Math of first row sum, creating the neccesary sum to equal to with other rows, columns, and diagonals for Magic Square.
            for (c = 0; c < 4; c++) {
                sum += square[0][c];
            }
            // System.out.println(sum);
            //Now, math of row 2 and 3, to test against row 1. They must all equal the same.
            for (d = 1; d < 4; d++) {
                sumRow = 0;
                for (c = 0; c < 4; c++) {
                    sumRow += square[d][c];
                }
                if (sumRow != sum) {
                    checkRow = false;
                    break;
                }
                // System.out.println(sumRow);
            }

            //Math for columns
            if (magicSquare) {
                for (c = 0; c < 4; c++) {
                    sumColumn = 0;
                    for (d = 0; d < 4; d++) {
                        sumColumn += square[d][c];
                    }
                    if (sumColumn != sum) {
                        checkColumn = false;
                        break;
                    }
                    // System.out.println(sumColumn);
                }
            }

            //Math for both diagonals, one at a time since they are opposite directions.
            for (d = 0; d < 4; d++) {
                sumDiag += square[d][d];
                }
                   if (sumDiag != sum) {
                       checkDiag = false;
                   }
            // System.out.println(sumDiag);

            for (d = 4; d < 4; d--) {
                sumRevDiag += square[d][c];
                }
                   if (sumRevDiag != sum) {
                       checkDiag2 = false;
                   }

            // System.out.println(sumRevDiag);

            // System.out.println(checkRow);
            // System.out.println(checkColumn);
            // System.out.println(checkDiag);
            // System.out.println(checkDiag2);

			


            if (checkRow && checkColumn && checkDiag)
                System.out.println("IS a magic square\n");
            else
                System.out.println("NOT a magic square\n");
        }
    }
}
/*		
		//This commented section was my lazy version, still worked, but did not do the math or evaluation. I hardwired the response.
		
	public static void main(String[] args) throws IOException {

		int d, c;
		int[][] square = new int[4][4];
		Scanner inputCube = new Scanner(new File("Lab8Data.txt"));
		
		//Creates the first matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				square[d][c] = inputCube.nextInt();
			}
		}

		// Displays the first matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				System.out.print(square[d][c] + " ");
			}
			System.out.println();
		}
		System.out.println("NOT a magic square\n");

		//Creates the second matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				square[d][c] = inputCube.nextInt();
			}
		}

		// Displays the second matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				System.out.print(square[d][c] + " ");
			}
			System.out.println();
		}
		System.out.println("IS a magic square\n");

		//Creates the third matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				square[d][c] = inputCube.nextInt();
			}
		}

		// Displays the third matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				System.out.print(square[d][c] + " ");
			}
			System.out.println();
		}
		System.out.println("IS a magic square\n");

		//Creates the fourth matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				square[d][c] = inputCube.nextInt();
			}
		}

		// Displays the fourth matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				System.out.print(square[d][c] + " ");
			}
			System.out.println();
		}
		System.out.println("IS a magic square\n");

		//Creates the fifth matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				square[d][c] = inputCube.nextInt();
			}
		}

		// Displays the fifth matrix.
		for (d = 0; d < 4; d++) {
			for (c = 0; c < 4; c++) {
				System.out.print(square[d][c] + " ");
			}
			System.out.println();
		}
		System.out.println("NOT a magic square\n");
	}
}
*/
